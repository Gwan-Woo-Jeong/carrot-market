// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// #14.6 Pagination
// connection pool timeout 설정
// 데이터베이스 연결 URL에 pool_timeout 매개변수를 명시적으로 설정하면 pool_timeout를 지정 가능

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL") // ex) url = "...?connection_limit=5&pool_timeout=2"
  relationMode = "prisma"
}

// #13.1 Reviews

// 레코드가 이미 존재하는 상태에서 테이블에 필드 추가 시 충돌 해결방법
// 1. 기존 테이블에 있는 레코드 전부 삭제
// 2. 추가하는 필드를 optional 설정
// 3. 추가하는 필드에 기본값 (default) 부여

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?     @db.MediumText
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[]
  products        Product[]
  fav             Fav[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews") // 리뷰 작성한 유저
  receivedReviews Review[]    @relation(name: "receivedReviews") // 리뷰 받은 유저
  sales           Sale[]
  purchases       Purchase[]
  records         Record[]
  streams         Stream[]
  messages        Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  fav         Fav[]
  sales       Sale[]
  purchases   Purchase[]
  Record      Record[]

  @@index([userId])
}

model Post {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade) // user에게 속함
  question   String      @db.MediumText
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  answers    Answer[]
  wonderings Wondering[]
  latitude   Float?
  longitude  Float?

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // user에게 속하면서
  userId    Int
  answer    String   @db.MediumText
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // 동시에 post에도 속한다
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // user에게 속하면서
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // 동시에 post에도 속한다
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  //  User를 두 번 가리키고 있는 상황 -> 각 관계의 이름을 명시해주어야 함
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade) // 리뷰를 작성한 유저
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade) // 리뷰를 받은 유저
  createdForId Int
  score        Int      @default(0)

  @@index([createdById])
  @@index([createdForId])
}

///////////////////////////

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

///////////////////////////
// 위와 같이 똑같은 형태(Fav, Sale, Purchase)의 모델을 다음과 같이 생성할 수 있음

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kind      Kind

  @@index([productId])
  @@index([userId])
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String    @db.MediumText
  price       Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int

  @@index([userId])
  @@index([streamId])
}
